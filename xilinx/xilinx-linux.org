#+title: Building Xilinx Linux support
#+date: june 2022
#+author: Antoine Fraboulet

The following instructions needs a cross compiler environment and an
external rootfs. Such things can be build using the
[[file:rootfs-petalinux.org][rootfs-petalinux.org]] guide.

* Setting up the environment

You need to have a cross-compiler environment setup to build the tools
and target binaries. This environment be sourced from several places
such as

- https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads
- local distribution packaging (/e.g./ =gcc-arm-linux-gnueabi= on Debian)
- local Xilinx Petalinux install (see [[file:rootfs-petalinux.org][rootfs-petalinux.org]])
- local Xilinx Vitis install (needed for Syfala anyway)

The last part (device-tree configuration) requires some of the Xilinx
tools available in Petalinux and/or Vitis.

You can set your shell environment using the following script. The 2 important
variables are =CROSS_COMPILE= and =ARCH=. This script suppose that your
cross-compiler and tools are already in your =PATH=.

#+name cross-env
#+begin_src sh
  #! /usr/bin/env bash

  if [ "x${PETALINUX}" = "x" ] ; then 
          echo "make sure to setup petalinux sources before that script"
  else
          export CROSS_COMPILE=arm-none-eabi-
          export ARCH=arm
          
          # extra tooling
          export PATH=${PETALINUX}/tools/xsct/bin:${PATH}
          export PATH=${HOME}/syfala/boot/u-boot-xlnx/tools:${PATH}
          export PATH=${HOME}/syfala/boot/dtc:${PATH}
          export PS1="[X]$PS1"
  fi
#+end_src

* First Stage Boot Loader and Boot Loader

Both the first stage boot loader (FSBL) and boot loader are both built
from =u-boot= ([[https://www.denx.de/wiki/U-Boot][u-boot webpage]]).

We use a Xilinx modified u-boot (=u-boot-xlnx=) available on the Xilinx
github page. Building u-boot requires both =flex= and =bison= tools.

#+BEGIN_SRC sh
  # apt install flex bison libssl-dev
#+END_SRC

Compiling u-boot is straightforward. We use the main project branch
with the current HEAD.

In recent revisions (exact modification not verified) the
configuration of interest is called =xilinx_zynq_virt_defconfig=.
Previous/older revisions were using a configuration named
=zynq_zybo_z7_defconfig=).

Configurations can be found in =u-boot-xlnx/configs/=.

Some Xilinx notes are available in =doc/board/xilinx/zynq.rst=.

** compiling HEAD (June 2022)
#+begin_src sh
  $ git clone https://github.com/Xilinx/u-boot-xlnx
  $ cd u-boot-xlnx
  $ export DEVICE_TREE=zynq-zybo-z7
  $ make xilinx_zynq_virt_defconfig
  $ make
#+end_src

** using a specific older revision
#+begin_src sh
  git clone https://github.com/Xilinx/u-boot-xlnx
  cd u-boot-xlnx
  git checkout 195c620e348891ca2d90c759781413f2adb3f748
  make zynq_zybo_z7_defconfig
  make
  #+end_src

** fsbl and u-boot binaries

Once compiled, binaries and files of interest are
- =spl/boot.bin=
- =u-boot.img=
- =u-boot.dtb=    
  
* Linux kernel build

A modified linux kernel source tree is also available on github at
https://github.com/Xilinx/linux-xlnx.git

The complex configuration part will be driven by the device tree
and the default zynq configuration available in the kernel can
be used safely.

  #+BEGIN_SRC sh
    $ git clone https://github.com/Xilinx/linux-xlnx.git
    $ cd linux-xilinx
    $ make ARCH=arm xilinx_zynq_defconfig
    $ make ARCH=arm UIMAGE_LOADADDR=0x8000 uImage
  #+END_SRC
  
  Configurations are stored in
  - =arch/arm/configs/xilinx_zynq_defconfig=
  - =arch/arm/mach-zynq=

  If you change/modify the configuration, please sure to keep
  =OF_FPGA_REGION= and =FPGA_BRIDGE= activated.

  Final compilation stages require =mkimage= which can be found in
  your distribution ( =u-boot-tools= package) or in the source tree
  presented in the previous section on compiling =u-boot=.

#+BEGIN_SRC sh
  $ apt install u-boot-tools # if needed
#+END_SRC

  Files of interest, once compiled, are the kernel image and information
  about the platform. 
  - =arch/arm/boot/uImage=
  - =arch/arm/boot/dts/zynq-zybo-z7.dts=

  A default =dtb= file can be compiled within the linux source tree
  using the device-tree compiler (installed or see next section).

#+begin_src sh
  $ make ARCH=arm dtbs              # full build, way overkill
  $ make ARCH=arm zynq-zybo-z7.dtb  # build target only
#+end_src

  Some Xilinx notes on device trees are available from Xilinx
  https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842279/Build+Device+Tree+Blob

* Device-tree and XSA file

  The device tree is of primary importance within Syfala as it
  contains the platform configuration. This configuration includes the
  interface between FPGA and processors.

  A device tree configuration can be resued as long as the interface
  generated by Faust/Syfala does not change.

  We need to have access to the Vitis generated =xsa= file to get all
  information regarding platform configuration.

  The following part can be handmade but Xilinx provides several tools
  to help in the device tree generation. These tools are are =DTG
  Device Tree Generator= and use the =xsct= (Xilinx Software Command-Line
  Tool) interpreted provided in Vitis or Petalinux installations
  (=${Petalinux}/2020.2/tools/xsct/bin/xsct=).

  See also (Xilinx XSCT)
  - https://www.xilinx.com/htmldocs/xilinx2018_1/SDK_Doc/xsct/intro/xsct_introduction.html
  - https://docs.xilinx.com/r/en-US/ug1400-vitis-embedded/Xilinx-Software-Command-Line-Tool

  Some vocabulary:
    
  - DTC  : Device Tree Compiler
  - DTB  : Device Tree Blob (binary used to boot a platform)
  - DTG  : Device Tree Generator (Xilinx tooling)
  - DTS  : Device Tree Source (configuration source file)
  - DTSI : Device Tree Include (overlay / modifications)
  - XSA  : xsa files are platform description generated by vitis, they contain information on both the
    hardware design (fpga) and software configuration.


** How to build a DTS outside of Petalinux

  Useful Xilinx information and links can be found here:
  - Xilinx Wiki: https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/341082130/Quick+guide+to+Debugging+Device+Tree+Generator+Issues
  - Xilinx Reference Device Tree: https://github.com/Xilinx/device-tree-xlnx
  - Device Tree Compiler: https://git.kernel.org/pub/scm/utils/dtc/dtc.git

  Most (all) distribution provides a device tree compiler. It can be
  easily compiled from sources to get the latest version.
  
#+begin_src sh
  git clone https://git.kernel.org/pub/scm/utils/dtc/dtc.git
  cd dtc
  make
  export PATH=$PATH:<path to dtc>
#+end_src

  The next step is to build an environment similar to the one provided
  in Petalinux to generate the correct device tree source according to
  the target platform and FPGA configuration. These stages are
  dependant on Xilinx tools but once the main configuration has been
  set up, handling modification can be done separately.

** Device Tree Generator (DTG)

  Device sources are built from a reference source set and the =xsa= file.
  Xilinx tools are used to parse xsa information (a xsa file is a zip
  file containing several description files and the fpga bitstream).
  
  Clone the Xilinx reference device tree:
  
#+begin_src sh
  git clone https://github.com/Xilinx/device-tree-xlnx
  cd device-tree-xlnx
  git checkout xilinx-v2020.1 
#+end_src

  =tcl= scripts are provided on the Xilinx wiki to mimic actions performed
  by =petalinux-build= during a build.
  These files are also provided here:
  - [[file:dtg/build_dts.tcl][build_dts.tcl]] (from Xilinx wiki)
  - [[file:dtg/Makefile][Makefile]] (from Xilinx wiki)

  Setting up a DTG hierarchy can be made by assembling the following files:
      #+begin_src
      dtg/
      ├── build_dts.tcl
      ├── device-tree-xlnx/  # git clone
      ├── Makefile
      ├── my_dts/            # will contain result dts/dtb files
      ├── system.xsa         # generated from Vitis tools
      └── zynq-zybo-z7.dtsi  # Syfala hand-made configuration
      #+end_src     

  =zynq-zybo-syfala.dtsi= is available here [[file:dtg/zynq-zybo-syfala.dtsi][zynq-zybo-syfala.dtsi]].
  
  The makefile contain several rules to build a =dtb= file. The process
  involves mainly 3 steps:
  - build a base =dts= file =system-top.dts= : =make dts XSA_FILE=<Path to XSA FILE>.xsa=
  - add local modifications : =make include_dtsi DTSI_FILE=zynq-zybo-syfala.dtsi=
  - compile to a =dtb=:  make compile

  The important file is the final =dtb= file:
  =my_dts/system-top.dtb=. This file can be copied on the SD card
  (=system.dtb=) to parameterise the linux boot process.




